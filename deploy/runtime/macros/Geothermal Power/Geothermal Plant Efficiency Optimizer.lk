/*@
This macro calculates the optimum plant efficiency of the Binary Geothermal Plant (open in active case) which minimizes the project's Levelized Cost of Electricity (LCOE).


<br><br>How the macro works:

<br><ol>
<li>The optimizer runs simulations for plant efficiencies starting at the max efficiency of 100%, and records the project's LCOE at every iteration.</li>
<li>Once the optimizer calculates the project's lowest LCOE, the simulation is ended.</li>
<li>The active case is automatically updated with this lowest LCOE value. </ii>
</ol>

<br><br>Re-run the active simulation which is now updated with the optimized plant efficiency.

<br><br><b>Note</b>: This optimizer only works for the binary plant type.
@*/


//Exit macro if plant type is set to flash in active case
if(get('conversion_type') == 1) {
	msgbox('You selected the Flash Plant type in the active case. This optimizer only works for the binary plant type. Please change the plant type in the active case and run this macro again.');
exit;
}
else outln("Calculating...");

set('geotherm.cost.plant_auto_estimate', true);


//////////////****** INITIALIZING VARIABLES ******//////////////

count = 0;								//Counter for outermost loop
min_lcoe = null;						//Variable to store lowest LCOE
optimal_i = null; 						//Variable to store plant efficiency obtained at lowest LCOE (in outermost loop)
optimal_cost_at_min_lcoe = null;		//Variable to store plant efficiency obtained at lowest LCOE (in intermediate loop)
flag = false;							//Exit out of all the loops when flag is turned 'on'
i = null;								//Outermost loop index (sets plant efficiency in active case)
j = null; 								//Intermediate loop index (sets plant efficiency in active case)
k = null;								//Innermost loop index (sets plant efficiency in active case)
count = 0; 		//counter
 
 
 
 
//////////////****** S I M U L A T I O N ******//////////////
 
//OUTTERMOST LOOP
for(i = 100 ; i >= 0 ; i = i - 10) 
{
	set('plant_efficiency_input', i);
	simulate();
	lcoe[count] = get('lcoe_real');
	

	//If minimum lcoe has been reached, step into the nested (intermediate) for loop
	if((count > 0)  &&  (lcoe[count - 1] < lcoe[count] )) 		//(count > 0) condition ensures outermost loop runs entirely atleast once
	{
		//min_lcoe = lcoe[count -1 ];
		i = i + 10;			//resets i to value for which lowest project LCOE was recorded
		count = 0; 			//Reset counter for intermediate loop
		
		//INTERMEDIATE LOOP
		for( j = i + 9 ; j >= (i - 10) ; j = j - 1) 		//This loop searches for the minimum in the efficiency range of [(i + 9) through (i - 10)]%
		{
			set('plant_efficiency_input', j);
			simulate();
			lcoe[count] = get('lcoe_real');
			
		
			//If minimum lcoe has been reached, step into the nested (innermost) for loop
			if((count > 0) && (lcoe[count - 1] < lcoe[count] )) 	//(count > 0) to ensure the intermediate loop runs at least once
			{
				j = j + 1;			
				count = 0; //Reset counter for innermost loop 
				
				//INNERMOST LOOP
				for ( k = j + 0.9 ; k >= j - 1; k = k - 0.1) {		//This loop searches for the minimum in the efficiency range of [(j + 0.9) through (j - 1)]%
				
					set('plant_efficiency_input', k);
					simulate();
					lcoe[count] = get('lcoe_real');
					
					
					//Store calculated lcoe value and corresponding plant efficiency if condition is met
					if ((count > 0) && (lcoe[count - 1] < lcoe[count])) {
						min_lcoe = lcoe[count-1] ;
						optimal_i = k + 0.1;
						optimal_cost_at_min_lcoe = get('geotherm.cost.plant_per_kW');
						flag = true;			//Minimum LCOE of project has been calculated. Flag is turned on to exit all loops.
					}
					
					count = count + 1;
					
					if (flag == true) 	//if flag is on, exit all loops.
					{
						k = -40;
						j = -30;
						i = -10;
					}
					
				} //End of innermost loop
				
			}
			
			count = count + 1;
			
		} //End of intermediate loop
	}

	count = count + 1;
	
} //End of outermost loop

set('plant_efficiency_input', optimal_i);			//Set the plant efficiency in the active case to this optimum plant efficiency


//////////////****** DISPLAYING RESULTS IN HTML WINDOW ******//////////////

str = '<html><body><h3> Result </h3><p>Reported for case: ' + active_case() + '</p><br><br>';
str += 'Plant has the lowest LCOE of $' + min_lcoe/100 + '/kWh at an overall efficiency of ' + optimal_i + '%'; 
str += '<br>Simulate the active case which is now updated with this optimized plant efficiency value.';
str += '</body></html>';
html_dialog(str, 'Optimal Plant Efficiency', [600,300]);


//////////////****** END OF SCRIPT ******//////////////
