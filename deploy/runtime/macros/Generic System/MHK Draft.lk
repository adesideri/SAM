//Marine Hydrokinetic (MHK) Model Macro
//Mar 2018

/*@

This macro multiplies a Wave Resource matrix with a Wave device power matrix and and assigns the calculated annual energy 
as the power plant generation profile. It also reads in cost data from an MHK Cost Breakdown Structure file and calculates
LCOE using NREL's Annual Technology Baseline methodology, then creates a PDF report summarizing the system.
<br><br>

<i> Select the location of your resource file, power file, and Cost Breakdown Structure file on the right, then click 'Run macro' above to run the macro.

@*/
//@ name=res_file;type=filename;label=Resource file:;value=C:/Users/jfreeman/Documents/Projects/4 MHK/USA CA Eureka Humboldt Bay (NDBC).csv|csv
//@ name=pwr_file;type=filename;label=Power file:;value=C:/Users/jfreeman/Documents/Projects/4 MHK/Wave Power Matrix Example.csv|csv
//@ name=xl_file;type=filename;label=CBS file:;value=C:/Users/jfreeman/Documents/Projects/4 MHK/CBS SAM Template 2018Mar23.xlsx|xlsx,xls


//check that the Generic System and LCOE model are used, and that there is an active case
case = active_case();
if (case == '')
{
	msgbox('You must set an active case, Generic/LCOE Calculator.');
	exit;
}
config = configuration();
if (config[0] != 'Generic System')
{
	msgbox('The MHK calculator only works with Generic System selected as the technology model.');
	exit;
}
if (config[1] != 'LCOE Calculator')
{
	msgbox('The MHK calculator only works with the LCOE Calculator selected as the financial model.');
	exit;
}

//read in the resource file
resource_file = macro.res_file;
resource = csvread(resource_file, {skip=3, numeric=true, table=false});

//read in the power file
power_file = macro.pwr_file;
power = csvread(power_file, {skip=3, numeric=true, table=false});

//need to add a check that the resource and power matrices are 1:1 as far as periods and amplitudes, add some type of lookup capability?

//multiply the resource and power together
weighted_avg_power = 0;
rated_power = 0; //set the rated power as the maximum number in the power matrix
for (i=1; i<20; i++) //start at the first column, because column 0 contains row labels //need to not hardcode this number in!
	for (j=1; j<22; j++) //need to not hardcode this number
	{
		weighted_avg_power += resource[i][j] / 100 * power[i][j]; //convert resource from 4.5% to 0.045, multiply by power in kW
		if (power[i][j] > rated_power) rated_power = power[i][j]; //rated power is in kW, as is the power matrix
	}
//the weighted avg energy is going to be assigned evenly to every timestep, so there is no need to multiply by the number of hours in a year (8760)
outln('Weighted average power over the year for a single device= ' + weighted_avg_power);

//open the Excel Cost Breakdown Structure spreadsheet
xl_path = macro.xl_file;
xl = xl_create(xl_path, false);

//Get input system parameters from CBS
num_devices = to_real(xl_get(xl, 'NDevices'));
system_capacity = num_devices * rated_power;
projectname = xl_get(xl, 'ProjectName');
set('system_capacity', system_capacity);

//assign the annual energy to the generic case
set('spec_mode', 1); //select hourly energy profile
hourly_power = alloc(8760);
for(i=0; i<8760; i++)
	hourly_power[i] = weighted_avg_power * num_devices; //units of kW
set('energy_output_array', hourly_power); 
set('derate', 0); //set system losses to zero
set('heat_rate', 0); //set heat rate to zero

//costs are in $, not $/kW, select appropriate input in UI
set('ui_cost_input_option', 0);

//Get CAPEX costs from CBS spreadsheet
capex = to_real(xl_get(xl, 'CAPEX'));
outln('Total CapEx = ' + capex);
set('ui_capital_cost_fixed', capex);

//Get OpEx costs from CBS spreadsheet
opex = to_real(xl_get(xl, 'OPEX'));
outln('Total OpEx = ' + opex);
set('ui_operating_cost_fixed', opex);

//get other costs for the pie chart from the CBS while we have it open
structure = to_real(xl_get(xl, 'Structure'));
pcc = to_real(xl_get(xl, 'PCC'));
development = to_real(xl_get(xl, 'Development'));
engmanag = to_real(xl_get(xl, 'EngManag'));
elecinfrast = to_real(xl_get(xl, 'ElecInfrast'));
commissioning = to_real(xl_get(xl, 'Commissioning'));
access = to_real(xl_get(xl, 'Access'));
install = to_real(xl_get(xl, 'Install'));
otherinfras = to_real(xl_get(xl, 'OtherInfras'));
foundation = to_real(xl_get(xl, 'Foundation'));
financial = to_real(xl_get(xl, 'Financial'));

//close the Excel Cost Breakdown Structure spreadsheet now that we're done with it
xl_close(xl);
xl_free(xl);

//set the financial parameters for this system //need to confirm that user doesn't enter FCR
set('ui_fixed_charge_rate', 0.108);
set('ui_fcr_input_option', 0);

//run the simulation and show the results page
simulate('', true);
show_page('results');

//create pie chart for the report
aep = get('first_year_output');
lcoe = get('lcoe_fcr');
fcr = get('fixed_charge_rate');

//function to determine the % contribution to LCOE of a given capital cost
function lcoe_fraction(cost)
{
	return round((fcr * cost / aep) / lcoe * 100);
}

//create the sectors of the pie chart
sectors = [ 
	[ lcoe_fraction(structure), 'Structure' ],
	[ lcoe_fraction(pcc), 'Power Conversion Chain' ],
	[ lcoe_fraction(development), 'Development' ],
	[ lcoe_fraction(engmanag), 'Engineering Management' ],
	[ lcoe_fraction(elecinfrast), 'Elec. Infrastructure' ],
	[ lcoe_fraction(commissioning), 'Commissioning' ],
	[ lcoe_fraction(access), 'Site Access' ],
	[ lcoe_fraction(install), 'Assembly/Installation' ],
	[ lcoe_fraction(otherinfras), 'Other Infrastructure' ],
	[ lcoe_fraction(foundation), 'Foundation/Mooring' ],
	[ lcoe_fraction(financial), 'Financial Costs' ],
	[ round(opex / aep/ lcoe * 100), 'OpEx' ] ]; //OpEx is treated differently since it happens every year

//Ask user if they would like to generate a PDF report from these results
if (yesno('Would you like to generate a PDF report with these results?'))
{
	//create the pie chart image
	url = 'https://chart.googleapis.com/chart?';
	url += 'cht=p&'; //2d pie chart
	url += 'chs=400x250&'; //chart size
	url += 'chtt=Contribution of Costs to LCOE&'; //chart title
	url += 'chco=cc2e89,e74c3c,cc712e,f1c40f,ccc02e,2ecc71,16a085,2eccc0,2980b9,2e3acc,8e44ad,c02ecc&'; //rainbow option
	url += 'chma=30,30,30,30|190,200&'; //margins: LRTB|legend WH
	//chart data- numerical values
	url += 'chd=t:';
	for (i=0; i<12; i++)
		url += to_string(sectors[i][0]) + (?(i==11)[',', '&']); //put an ampersand after the last entry, commas after the others
	//chart data- legend
	url += 'chdl=';
	for (i=0; i<12; i++)
		url += to_string(sectors[i][1]) + ' (' + to_string(sectors[i][0]) +'%)' + (?(i==11)['|', '']); //pipe separator except for last entry
	url = replace(url, '(0%)', '(<1%)'); //change labels for things that rounded to zero
	//get the chart image from google API
	piechartfile = tempfile('png'); //specify a temporary location to save the plot
	ok = curl( url, {'file'=piechartfile} );
	if (!ok)
	{
		msgbox('Pie chart rendering failed.');
		exit;
	}

	//pass information to the report from the CBS spreadsheet
	data.structure = structure;
	data.pcc = pcc;
	data.development = development;
	data.engineering = engmanag;
	data.elec_infra = elecinfrast;
	data.commissioning = commissioning;
	data.site_access = access;
	data.assembly = install;
	data.other_infra = otherinfras;
	data.foundation = foundation;
	data.financial = financial;
	data.device_rating = rated_power;
	data.device_avg_power = weighted_avg_power;
	data.num_devices = num_devices;
	data.projectname = projectname;
	
	//add the plot to the data being passed to the report
	data.pieplot = 1;
	data.piechartfile = piechartfile; 

	reportfile = choose_file(homedir(), 'Output report file', 'PDF files (*.pdf)|*.pdf'); 
	if (reportfile == '') exit; //if statement covers the case where someone hits cancel
	templatefile = runtimedir() + 'macros/Generic System/mhkmacro.samreport';
	ok = pdfreport(reportfile, {template = templatefile, metadata = data});
	if (ok)	browse(reportfile); //open the report
	else (msgbox('Report generation failed.'));
	
	// Delete temporary chart file 
	remove_file( piechartfile );
}



