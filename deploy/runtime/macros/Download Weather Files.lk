/*@

<p>Location data from a CSV file is read in, TMY or a specified year's data is downloaded from the NSRDB and placed into a user-specified folder
<br><br>
Locations can be specified as latitudes and longitudes or as addresses. 
<br><br>
Input:<br><ul>
<li>CSV file with the relevent column headers (depending on Location mode): lat, lon, address, dataset.
and rows containing the desired location data. <br/>
As an example, here is the header line and subsequent rows of data.  <br/>
Note, both address and lat,lon are provided for reference, but only one set is required  <br/>
	<br/>
	lat, lon, address, dataset <br/>
	39.7444, -105.152, 15013 Denver W Pkwy Golden CO, tmy <br/>
	38.8977, -77.0365, 1600 Pennsylvania Ave NW Washington DC, 2013 <br/>
	<br/>
The NSRDB typically supports years of 1998 - 2016 for the dataset (in addition to tmy). <br/>
If the year input falls out of those ranges, a warning will be issued <br/>
<li>Output folder
<li>Location mode: Select whether data is specified as latitude and longitude or address.
<li>Desired weather data interval.  Select 30-minute or 60-minute
<br></ul>

Output:<br><ul>
<li>CSV files saved to the user specified folder

<br><br>
<i> Click "Run macro" above to download the weather files after setting up your inputs </i>

@*/

//@ name=location_file;type=filename;label=Location file:;value=;
//@ name=location_output;type=folder;label=Output folder:;value=;
//@ name=Location_mode;type=combo;label=Location mode:;value=Latitude and Longitude,Address;sel=0;
//@ name=interval;type=combo;label=Desired interval (minutes):;value=30,60;sel=1;


function get_nsrdb( lat, lon, dataset, location_output, interval)
{
	valid = to_real(lat) >= -90 && to_real(lat) <= 90 && to_real(lon) >= -180 && to_real(lon) <= 180;
	if ( !valid )
		return 'Lat/lon not valid';
		
	url = webapi( 'nsrdb_download' );
	url = replace(url, '<LON>', lon );
	url = replace(url, '<LAT>', lat );
	url = replace(url, '<DATASET>', dataset );
	url = replace(url, '<INTERVAL>', interval);
	
	// Download file (try a few times in case server is busy)
	attempt = 0;
	
	name = to_string(lat) + '_' + to_string(lon) + '_' + to_string(dataset) + '.csv';
	wf = location_output + '/' + name ;
	
	while (!file_exists(wf) && attempt < 3)
	{
		if ( !file_exists(wf) ){
			if ( !curl( url, { 'file'=wf }) )
				outln('NSRDB download error');
		}
		else {
			outln('File already downloaded, skipping');
		}
		
		// run wfcheck module to see if there are any data problems with the file
		ssc = ssc_create();
		ssc_var( ssc, 'input_file', wf );
		result = ssc_exec( ssc, 'wfcheck', {'show_dialog'=false} );
		ssc_free( ssc );
		
		if ( typeof(result) == 'string' )
		{
			obj = json_file(wf );	
			outln('Error in downloaded weather file data for ' 
				+ name + ':\n' 
				+ ( (typeof(obj)=='table' && obj ?@ 'errors') ? obj.errors[0] : result ) );
			remove_file( wf );
		}
		
		attempt++;
	}
	// Report error message if tried to download and failed
	if (attempt == 3 && !file_exists(wf)){
		outln(name + ' did not download successfully!');
	}
}	

function text_to_table( file_in )
{
	f_text = read_text_file( file_in );
	f_lines = split(f_text,'\n');
	keys = split(f_lines[0],',');
	for (i=1;i<#f_lines;i++)
	{
		arr = split(f_lines[i],',');
		ii=i-1;
		for (k=0;k<#keys;k++)
		{
			T{keys[k]}[ii] = arr[k];
		}
	}
	return T;
}

function main()
{

	location_file = to_string(macro.location_file); 
	location_output = to_string(macro.location_output);
	interval = to_string(macro.interval);
	location_mode = to_string(macro.location_mode);
	
	outln('Reading: ' + location_file);
	outln('Writing to: ' + location_output);
	outln('');
	locations = text_to_table(location_file);
	
	n_records = 0;
	if (!strcmp(location_mode, 'Address')){
		n_records = #locations.address;
	} else {
		n_records = #locations.lat;
	}

	//For each site in lookup file
	for ( j=0; j<n_records; j++ )
	{
		lat = 0; 
		lon = 0;
		
		// Geocode
		if (!strcmp(location_mode, 'Address')){
			latlon = geocode(locations.address[j]);
			lat = latlon.lat;
			lon = latlon.lon;
		}
		else {
			lat = locations.lat[j];
			lon = locations.lon[j];
		}
		dataset = locations.dataset[j];
		
		// status message
		outln('Getting weather file ' + j + " for " + to_string(lat) + ", " + to_string(lon) + ", " + to_string(dataset));
		
		if (stricmp(to_string(dataset), 'tmy') != 0)
		{
			year = to_int(dataset);
			if (year < 1998)
			{
				outln('Year selected was ' + to_string(year) + ' but NSRDB only goes back to 1998, setting year to 1998');
				year = 1998;
			} 
			elseif (year > 2016) {
				outln('Year selected was ' + to_string(year) + 'but NSRDB only goes to 2016, setting year to 2016');
				year = 2016;
			}
			dataset = year;
		}
		
		// Download weather file
		get_nsrdb( lat, lon, to_string(dataset), location_output, interval );
		millisleep(1000);
	}
	outln('');
}

main();
