Solar Resource Data
882
742
47
GroupBox

1
7
Name
5
9
GroupBox2
X
3
9
Y
3
12
Width
3
870
Height
3
267
Caption
5
22
Solar Resource Library
Bold
2
1
Hyperlink

1
8
Name
5
10
Hyperlink2
X
3
24
Y
3
396
Width
3
847
Height
3
21
Caption
5
123
Go to SAM website Weather Page for information about NSRDB and PVGIS, and for links to other sources of solar resource data
URL
5
33
https://sam.nrel.gov/weather-data
TabOrder
3
0
Numeric

1
16
Name
5
13
annual_albedo
X
3
738
Y
3
708
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
1
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
11
annual_beam
X
3
147
Y
3
681
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
14
annual_diffuse
X
3
147
Y
3
708
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
13
annual_global
X
3
147
Y
3
654
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
0
Decimals
3
2
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
11
annual_snow
X
3
738
Y
3
681
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
1
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
11
annual_tdry
X
3
462
Y
3
651
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
0
Decimals
3
1
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
11
annual_wspd
X
3
462
Y
3
681
Width
3
103
Height
3
24
Value
1
0.000000
Mode
3
1
Format
3
0
Decimals
3
1
Prefix
5
0
Suffix
5
0
ThousandsSep
2
1
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Button

1
7
Name
5
12
btn_download
X
3
636
Y
3
366
Width
3
234
Height
3
24
Caption
5
30
Download and add to library...
TabOrder
3
10
Button

1
7
Name
5
12
btn_file_add
X
3
717
Y
3
453
Width
3
153
Height
3
24
Caption
5
19
Add file to library
TabOrder
3
11
TextEntry

1
10
Name
5
4
city
X
3
75
Y
3
540
Width
3
208
Height
3
24
Text
5
9
Your City
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
6
TextEntry

1
10
Name
5
7
country
X
3
75
Y
3
594
Width
3
208
Height
3
24
Text
5
3
usa
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Label

1
12
Name
5
23
downlad_weather_caption
X
3
24
Y
3
297
Width
3
846
Height
3
36
Caption
5
248
Download the latest weather files from the NSRDB to add to your solar resource library: Download a typical-year (TMY) file for most long-term cash flow analyses, or choose files to download for single-year or P50/P90 analyses. See Help for details.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Button

1
7
Name
5
15
dview_for_solar
X
3
717
Y
3
495
Width
3
153
Height
3
24
Caption
5
12
View data...
TabOrder
3
12
Numeric

1
16
Name
5
4
elev
X
3
366
Y
3
594
Width
3
103
Height
3
24
Value
1
317.000000
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
2
 m
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
9
Label

1
12
Name
5
14
folder_caption
X
3
24
Y
3
177
Width
3
846
Height
3
36
Caption
5
198
SAM scans the following folders on your computer for valid weather files and adds them to your Solar Resource library. To use weather files stored on your computer, add folders containing the files.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Divider

1
9
Name
5
14
group_optional
X
3
603
Y
3
660
Width
3
267
Height
3
16
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
13
Optional Data
Bold
2
1
TextEntry

1
10
Name
5
11
in_location
X
3
24
Y
3
366
Width
3
381
Height
3
24
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
6
StringArray

1
8
Name
5
16
in_location_list
X
3
306
Y
3
366
Width
3
99
Height
3
24
Label
5
13
Location List
Description
5
51
Type or import a list of addresses or lat,lon pairs
TabOrder
3
7
RadioChoice

1
10
Name
5
19
in_location_options
X
3
24
Y
3
339
Width
3
246
Height
3
24
Selection
3
0
Items
6
2
One location
Multiple locations
ShowCaptions
2
1
Horizontal
2
1
TabOrder
3
4
Choice

1
8
Name
5
16
in_nsrdb_options
X
3
408
Y
3
366
Width
3
222
Height
3
24
Items
6
3
Default TMY file
Choose year
Download files for all years (P50/P90)
Selection
3
0
TabOrder
3
7
RadioChoice

1
10
Name
5
12
in_time_step
X
3
408
Y
3
339
Width
3
222
Height
3
24
Selection
3
0
Items
6
2
60-minute
30-minute
ShowCaptions
2
1
Horizontal
2
1
TabOrder
3
8
CheckBox

1
8
Name
5
11
is_advanced
X
3
636
Y
3
339
Width
3
234
Height
3
24
Caption
5
22
Legacy data (advanced)
State
2
1
TabOrder
3
9
Numeric

1
16
Name
5
3
lat
X
3
558
Y
3
540
Width
3
103
Height
3
24
Value
1
1.100000
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
3
 °N
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
10
Label

1
12
Name
5
7
lbl_csp
X
3
702
Y
3
540
Width
3
169
Height
3
69
Caption
5
92
SAM's CSP models use a different time convention than NREL NSRDB data. See Help for details.
TextColour
4
255
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Label

1
12
Name
5
15
library_caption
X
3
24
Y
3
27
Width
3
846
Height
3
18
Caption
5
155
The Solar Resource library is a list of weather files on your computer. Choose a file from the library, or use the tools below to add files to the library.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
4294967295
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
MultilineText

1
10
Name
5
19
library_folder_list
X
3
27
Y
3
219
Width
3
603
Height
3
54
Text
5
38
List of Solar Resource library folders
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Numeric

1
16
Name
5
3
lon
X
3
558
Y
3
567
Width
3
103
Height
3
24
Value
1
1.200000
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
0
Suffix
5
3
 °E
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
11
Divider

1
9
Name
5
9
object 22
X
3
30
Y
3
633
Width
3
840
Height
3
16
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
50
Annual Averages Calculated from Weather File  Data
Bold
2
1
Divider

1
9
Name
5
11
object 2236
X
3
33
Y
3
522
Width
3
840
Height
3
16
Orientation
3
0
Colour
4
120
120
120
255
Caption
5
29
Header Data from Weather File
Bold
2
1
GroupBox

1
7
Name
5
8
object 4
X
3
9
Y
3
279
Width
3
870
Height
3
147
Caption
5
22
Download Weather Files
Bold
2
1
GroupBox

1
7
Name
5
10
object 423
X
3
9
Y
3
432
Width
3
870
Height
3
306
Caption
5
24
Weather Data Information
Bold
2
1
Label

1
12
Name
5
8
object 7
X
3
345
Y
3
708
Width
3
222
Height
3
24
Caption
5
28
*NaN indicates missing data.
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
1
AlignTop
2
0
Button

1
7
Name
5
15
refresh_library
X
3
636
Y
3
243
Width
3
234
Height
3
24
Caption
5
15
Refresh library
TabOrder
3
3
TextEntry

1
10
Name
5
20
solar_data_file_name
X
3
615
Y
3
495
Width
3
90
Height
3
24
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
TextEntry

1
10
Name
5
25
solar_data_file_name_load
X
3
615
Y
3
495
Width
3
90
Height
3
24
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
Button

1
7
Name
5
19
solar_data_settings
X
3
636
Y
3
216
Width
3
234
Height
3
24
Caption
5
34
Add/remove weather file folders...
TabOrder
3
2
TextEntry

1
10
Name
5
17
solar_data_source
X
3
366
Y
3
567
Width
3
103
Height
3
24
Text
5
3
src
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Library

1
7
Name
5
14
solar_resource
X
3
24
Y
3
48
Width
3
846
Height
3
126
Library
5
17
SolarResourceData
Fields
5
69
Name,Latitude,Longitude,Time zone,Elevation,Station ID,Source,Version
TextEntry

1
10
Name
5
19
solar_resource_file
X
3
87
Y
3
495
Width
3
619
Height
3
24
Text
5
0
Editable
2
0
ForeColour
4
128
0
64
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
TextEntry

1
10
Name
5
5
state
X
3
75
Y
3
567
Width
3
208
Height
3
24
Text
5
2
AX
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
TextEntry

1
10
Name
5
10
station_id
X
3
366
Y
3
540
Width
3
103
Height
3
24
Text
5
4
wban
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
7
Label

1
12
Name
5
15
summary_caption
X
3
18
Y
3
450
Width
3
690
Height
3
36
Caption
5
0
TextColour
4
0
0
0
255
Bold
2
0
FontSize
3
0
WordWrap
2
1
AlignRight
2
0
AlignTop
2
1
Numeric

1
16
Name
5
2
tz
X
3
558
Y
3
594
Width
3
103
Height
3
24
Value
1
-7.500000
Mode
3
1
Format
3
1
Decimals
3
3
Prefix
5
4
GMT 
Suffix
5
0
ThousandsSep
2
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
8
Numeric

1
16
Name
5
25
use_specific_weather_file
X
3
615
Y
3
495
Width
3
90
Height
3
24
Value
1
0.000000
Mode
3
0
Format
3
0
Decimals
3
0
Prefix
5
0
Suffix
5
0
ThousandsSep
2
0
Editable
2
0
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295
TextEntry

1
10
Name
5
27
user_specified_weather_file
X
3
615
Y
3
495
Width
3
90
Height
3
24
Text
5
0
Editable
2
1
ForeColour
4
0
0
0
255
BackColour
4
255
255
255
255
TabOrder
3
4294967295

32
annual_albedo
3
1
Annual albedo
 
Location and Resource
0
8
1
1
1
1
0.000000
Default
annual_beam
3
1
Direct normal (beam)
kWh/m²/day
Location and Resource
0
4
1
1
1
1
0.000000
Numeric
annual_diffuse
3
1
Diffuse horizontal
kWh/m²/day
Location and Resource
0
4
1
1
1
1
0.000000
Numeric
annual_global
3
1
Global horizontal
kWh/m²/day
Location and Resource
0
20
1
1
1
1
0.000000
Numeric
annual_snow
3
1
Maximum snow depth
cm
Location and Resource
0
8
1
1
1
1
0.000000
Default
annual_tdry
3
1
Average temperature
°C
Location and Resource
0
4
1
1
1
1
0.000000
Numeric
annual_wspd
3
1
Average wind speed
m/s
Location and Resource
0
4
1
1
1
1
0.000000
Numeric
city
3
4
City
 
Location and Resource
0
8
1
4
9
<invalid>
TextEntry
country
3
4
Country
 
Location and Resource
0
8
1
4
9
<invalid>
TextEntry
elev
3
1
Elevation
 
Location and Resource
0
8
1
1
1
1
0.000000
Numeric
file_name
3
4
Weather file name
 
Location and Resource
0
9
1
4
0
Default
in_location
3
4
Location Input
 
Location and Resource
0
1
1
4
64
Type a street address or latitude, longitude (skip for advanced)
Default
in_location_list
3
4
List of Locations
 
Location and Resource
3
abc
0
1
4
74
15458 Denver W Pkwy, Golden CO 804041|phoenix,az|45.5,-120.9|Manaus,Brazil
StringArray
in_location_options
3
1
Location Options
 
Location and Resource
0
1
1
1
1
1
0.000000
Default
in_nsrdb_options
3
1
NSRDB Options
 
Location and Resource
0
1
1
1
1
1
0.000000
Choice
in_time_step
3
1
Time Step Option
 
Location and Resource
0
1
1
1
1
1
0.000000
Default
is_advanced
3
1
Legacy and 30-minute data (advanced)
 
Location and Resource
0
1
1
1
1
1
0.000000
Default
lat
3
1
Latitude
°N
Location and Resource
0
8
1
1
1
1
0.000000
Numeric
library_folder_list
3
4
Solar resource library folders
 
Location and Resource
0
5
1
4
0
MultilineText
library_paths
3
4
Solar resource library file path list
 
Location and Resource
0
8
1
4
0
Default
lon
3
1
Longitude
°E
Location and Resource
0
8
1
1
1
1
0.000000
Numeric
solar_data_file_name
3
4
Weather file library selection
 
Location and Resource
0
4
1
4
0
TextEntry
solar_data_file_name_load
3
4
Weather file value on load
 
Location and Resource
0
0
1
4
0
Default
solar_data_source
3
4
Data Source 
 
 Location and Resource
0
8
1
4
3
src
TextEntry
solar_resource
3
4
Location
 
Location and Resource
19
SolarResourceData|0
19
1
4
0
Library
solar_resource_file
3
4
Weather file
 
Location and Resource
0
8
1
4
0
Default
state
3
4
State
 
Location and Resource
0
8
1
4
9
<invalid>
TextEntry
station_id
3
4
Station ID
 
Location and Resource
0
8
1
4
0
TextEntry
tz
3
1
Time zone
 
Location and Resource
0
8
1
1
1
1
0.000000
Numeric
use_specific_weather_file
3
1
Use weather file from script
 
Location and Resource
0
6
1
1
1
1
0.000000
Default
user_specified_weather_file
3
4
Weather file from script
 
Location and Resource
0
6
1
4
0
TextEntry
wf_nrecords
3
1
Number of weather file records
 
Location and Resource
0
4
1
1
1
1
8760.000000
Default

332
equations{'solar_resource_file'} = define() {
	if ( ${use_specific_weather_file} ) 
		return ${user_specified_weather_file};
	else 
		return ${solar_data_file_name}; // file name from solar resource library csv file
};

equations{'file_name'} = define() {
	// for compatibility with most SSC APIs
	return ${solar_resource_file};
};

18228
on_load{'Solar Resource Data'} = define() {
	on_change{'in_location_options'}();
//	msgbox('1. user_specified='+value('use_specific_weather_file'));
	on_change{'in_nsrdb_options'}();
//	msgbox('2. user_specified='+value('use_specific_weather_file'));
	update_library_folders('');
//	msgbox('3. user_specified='+value('use_specific_weather_file'));
	update_info();
//	msgbox('4. user_specified='+value('use_specific_weather_file'));

	value('solar_data_file_name_load', value('solar_data_file_name'));

	// UI updates do not work consistently if these
	// variables do not have widgets. They are stacked
	//  under the solar_resource_file widget.
	show('use_specific_weather_file', false);
	show('user_specified_weather_file', false);
	show('solar_data_file_name_load', false);
	show('solar_data_file_name', false);
	refresh();
};

on_change{'solar_resource'} = define() {
//	msgbox('solar_resource change 0. user_specified='+value('use_specific_weather_file') + 
//	'\nuser=' + value('user_specified_weather_file') +
//	'\nlib='+ value('solar_data_file_name'));
	if (	value('solar_data_file_name_load') != value('solar_data_file_name'))
	{
		value('use_specific_weather_file',0);
	}
	update_info();
//	msgbox('solar_resource change 1. user_specified='+value('use_specific_weather_file') + 
//	'\nuser=' + value('user_specified_weather_file') +
//	'\nlib='+ value('solar_data_file_name'));
};
/*
// without this crash 
on_change{'solar_data_file_name'} = define() {
	msgbox('solar_data_file_name change 0. user_specified='+value('use_specific_weather_file') + 
	'\nuser=' + value('user_specified_weather_file') +
	'\nlib='+ value('solar_data_file_name'));
	value('use_specific_weather_file',0);
	msgbox('solar_data_file_name change 1. user_specified='+value('use_specific_weather_file') + 
	'\nuser=' + value('user_specified_weather_file') +
	'\nlib='+ value('solar_data_file_name'));
};
*/
/*on_change{'solar_resource_file'} = define() {
//	msgbox('solar_resource_file on change, user_specified='+value('use_specific_weather_file') + ', ' + value('solar_resource_file'));
	if (value('use_specific_weather_file') == 0)
	{
		update_info();
	}
};*/

on_change{'solar_data_file_name'} = define() {
	update_info();
};

on_change{'user_specified_weather_file'} = define() {
	update_info();
};

// add user specified file folder path to list of
// library folders and set library to file
on_change{ 'btn_file_add' } = define () {
	f_name = value( 'solar_resource_file' );
	update_library_folders( path_only( f_name ) );
	libkey = file_only( f_name );
	libkey = mid(libkey,0,#libkey-4);		
	value( 'solar_resource', libkey );
};

// update weather file, annual summaries and summary 
// text based on whether file is from library or user
// specified via LK script
function update_info()
{

	display_csp_message();

	wf = value('solar_resource_file'); 

	if ( wf != value('solar_data_file_name') )
	{
		msg_caption = 'The simulation weather file is different from the file selected in the library because it was modified by an LK script.';
		msg_color = 'red';
		show_button = true;
	}
	else
	{
		msg_caption = 'The following information describes the data in the highlighted weather file from the Solar Resource library above. This is the file SAM will use when you click Simulate.';
		msg_color = 'black';
		show_button = false;
	}

	property( 'summary_caption' , 'Caption' , msg_caption );
	property( 'summary_caption' , 'TextColour' , msg_color );
	show('btn_file_add', show_button);
	show('group_optional',technology() == 'Flat Plate PV');
	show('annual_snow',technology() == 'Flat Plate PV');
	show('annual_albedo',technology() == 'Flat Plate PV');
	refresh();
	
	// if selected library file is no longer in library
	// reload library and exit
	if (!file_exists(wf) )
	{
//	msgbox('rescan, wf = ' + wf);
		rescanlibrary( 'solar' );
		update_library_folders( '' );
		refresh('solar_resource');
		return;
	}

	obj = ssc_create();
	ssc_var( obj, 'file_name', wf );
	if ( 0 == ssc_exec( obj, 'wfreader' ) )
	{
		value( 'annual_global', ssc_var(obj, 'annual_global') );
		value( 'annual_beam', ssc_var(obj, 'annual_beam') );
		value( 'annual_diffuse', ssc_var(obj, 'annual_diffuse') );
		value( 'annual_tdry', ssc_var(obj, 'annual_tdry') );
		value( 'annual_wspd', ssc_var(obj, 'annual_wspd') );
		value( 'annual_snow', ssc_var(obj, 'annual_snow') );
		value( 'annual_albedo', ssc_var(obj, 'annual_albedo') );

		// **NOTE: DOES THIS NEED TO BE UPDATED TO WORK FOR USER SPECIFIED FILE? **
		// used for timestep calculation in editscene3d
		value( 'wf_nrecords', ssc_var(obj, 'nrecords') );
	}
	else
	{
		value( 'annual_global', nan() );
		value( 'annual_beam', nan() );
		value( 'annual_diffuse', nan() );
		value( 'annual_tdry', nan() );
		value( 'annual_wspd', nan() );
		value( 'annual_snow', nan() );
		value( 'annual_albedo', nan() );
		value( 'wf_nrecords', nan() );
	}	
	
	ssc_free( obj );
}

// update ui list of library folders, and optionally
// add new path to library folders
function update_library_folders( new_path )
{
	x = get_settings('solar_data_paths');
	if ( new_path != '' )
	{
		if ( x != '' )
			x += ';';
		x += new_path;
		set_settings('solar_data_paths', x );
		rescanlibrary( 'solar' );
	}
	if ( x != '' )
		x = '\n' + replace( x, ';', '\n');
	value('library_folder_list', get_settings('NSRDBDownloadFolder') + x );
}

function display_csp_message() 
{
	tech = technology();
	csp_techs = ['Physical Trough','Empirical Trough','MSPT','DSPT','MSLF','DSLF','Dish Stirling','Generic CSP System'];
	is_csp = false;
	for ( i=0; i<#csp_techs; i++ )
		if ( tech == csp_techs[i] )
			is_csp = true;
	show( 'lbl_csp' , is_csp );
	refresh();
}

on_change{ 'in_location_options' } = define() {
	show('in_location_list',  value('in_location_options') == 1 && !value('is_advanced') );
	show('in_location',       value('in_location_options') == 0 && !value('is_advanced') );
	refresh();
};

on_change{ 'in_nsrdb_options' } = define() {
	show('in_location_list',   value('in_location_options') == 1 && !value('is_advanced') );
	show('in_location',        value('in_location_options') == 0 && !value('is_advanced') );
	show('in_location_options', !value('is_advanced') );
	// 30-minute data not available for tmy
	show('in_time_step', value('in_nsrdb_options') != 0 ); 
	refresh();
};

on_change{ 'is_advanced' } = define() {
	show('in_location_list',   value('in_location_options') == 1 && !value('is_advanced') );
	show('in_location',        value('in_location_options') == 0 && !value('is_advanced') );
	show('in_location_options', !value('is_advanced') );
	show('in_nsrdb_options', !value('is_advanced') );
	show('in_time_step', !value('is_advanced') );
	refresh();
};

// display window for advanced download
nsrdb_all = define() {
	hash = nsrdbquery();
	// meta data
	if ( hash != '' )
	{ 
		fn = hash{'file'};
		dn = hash{'folder'};
		af = hash{'addfolder'};
		if (af == "no")
		{
			if ((fn != '') && (dn != ''))
			{
				value( 'use_specific_weather_file', 1 );
				fn = replace(fn, '\\', '/');
				value( 'user_specified_weather_file', fn );
			}
		}
		else
		{
			rescanlibrary( 'solar' );
			if (fn != '')
			{
				value( 'use_specific_weather_file', 0 );
				libkey = file_only( fn );
				libkey = mid(libkey,0,#libkey-4);		
				value( 'solar_resource', libkey );
			}

		}
	}
};

on_change{'refresh_library'} = define() {
	rescanlibrary('solar');
};

on_change{'solar_data_settings'} = define() {
	if ( showsettings( 'solar' ) )
		rescanlibrary( 'solar' );
	update_library_folders( '' );	
};

on_change{'dview_for_solar'} = define() {
	if ( dview_solar(value('solar_resource_file')) )
		msgbox("An error occurred when reading the solar data file:\n" + 
			value('solar_resource_file') );
};

on_change{'btn_download'} = define() {
	if ( value( 'is_advanced' ) )
		nsrdb_all();
	else	
		nsrdb_get();
	rescanlibrary( 'solar' );
	update_library_folders( '' );
	refresh('solar_resource');
};

/////////////////////////////////////////////
// NSRDB download functions
/////////////////////////////////////////////

// clean up location string to use as file name
clean_name = define ( location )
{
	name = location;
	name = replace( name , ', ' , ',' );
	name = replace( name , ',' , '_' );
	name = replace( name , '  ' , ' ' );
	name = replace( name , ' ' , '_' );
	return lower(name);
};

// return url for current dataset for a location
// uses NSRDB lat, lon as input instead of wkt
// because always downloading single file
nsrdb = define ( location )
{
	name = '';
	url = '';
	years = [];
	msg = '';
	g = geocode( location );
	if ( !g.ok ) // sometimes correct address fails but works on second try
	{
		msg += 'Geocoding failed for ' + location + '. Trying again. ';
		g = geocode( location );
	}
	
	if ( g.ok )
	{
		geocode_ok = true;
		json_ok = false;
		url = webapi( 'nsrdb_query' );
		url = replace( url, '<LAT>', g.lat );
		url = replace( url, '<LON>', g.lon );
		json_str = curl( url );
		msg += 'URL for NSRDB query: ' + url + '\n';
		var = json_read( json_str );
		if ( typeof( var ) == 'table' )
		{
			if ( var.error != null )
			{
				msg = var.error + '. ';
				if ( strpos( lower(var.error.code), 'api' ) > -1 ) // no or invalid api key
					msg += 'See private.h to set API keys.';
			}
			elseif ( var.outputs == null )
				msg = 'No NSRDB data available for \"' + location + '\".';
			elseif ( var.outputs == [] )
				msg = 'No NSRDB data available for \"' + location + '\".';
			else
				json_ok = true;
		}
		else
		{
			msg += 'NSRDB did not return valid JSON string:';
			msg += json_str + '\n';
			if ( strpos( lower(json_str), 'api' ) > -1 ) // no or invalid api key
				msg += 'See private.h to set API keys.';
		}
		if ( json_ok )
		{
			ok = true;
			name = var.outputs[1].displayName;
			url = split(var.outputs[1].links[0].link,'?')[0];
			years = var.outputs[1].availableYears;
		}	
	}
	else
	{
		geocode_ok = false;
		msgbox( 'Failed to geocode address!\nThe address or latitude-longitude pair, \"' + location + '\", may be invalid, or SAM may be unable to connect to the internet.' );
		msg = 'Failed to convert to latitude-longitude pair: \"' + location + '\". ';
	}

	return { 'name' = name , 'msg' = msg , 'url' = url , 'years' = years , 'ok' = geocode_ok && json_ok , 'lat' = g.lat, 'lon' = g.lon };
};

wf_check = define( wf )
{
	if ( file_exists( wf ) )
	{
		ssc = ssc_create();
		ssc_var( ssc, 'input_file', wf );
		result = ssc_exec( ssc, 'wfcheck', {'show_dialog'=false} );
		ssc_free( ssc );
	}
	else
		result = 'Failed to open ' + wf + ' for checking.';
	return result;
};

// returns a single-year data file for the current NSRDB data available for 
// a location
nsrdb_get = define( )
{
	enum { TMY, SINGLE_YEAR, ALL_YEARS };
	enum { ONE_LOCATION, MULTIPLE_LOCATIONS };
	enum { HOURLY, HALF_HOURLY };
	
	msg = '';
	wf = '';
	download_ok = true;
	folder = wfdownloaddir();
	
	log_file = folder + '/sam_nsrdb_download_log.txt';
	if ( file_exists( log_file ) )
		flog = open( log_file , 'a' );
	else
		flog = open( log_file, 'w' );
	
	write_line( flog, '\n==========================================================');	
	write_line( flog, 'NSRDB Download ' + date_time());
	write_line( flog, '==========================================================\n');	
	
	if ( value( 'in_time_step' ) == HOURLY )
		time_step = '60';
	else
		time_step = '30';
	
	if ( value( 'in_location_options' ) == ONE_LOCATION )
		location = value('in_location');
	else
	{
		location_list = value('in_location_list'); // string with '|' delimiter
		location_list = replace( location_list, '\"', '' ); // files from spreadsheets may use quotes for strings
		location = split(location_list, '|');
	}
	if ( typeof( location ) == 'string' )
		location = [ location ];

	write_line( flog, 'Requested location(s): ' + location + '\n');
	
	pb = progressbar( { 'title' = 'Download Progress' , 'message' = 'Starting download.' , 'cancelbutton' = false , 'closebutton' = false , 'time' = false , 'max' = #location } );

	for ( n=0; n<#location; n++ )
	{
		write_line( flog, '----------------------------------------------------------');	
		write_line( flog, 'Location ' + to_string(n+1) + ' of ' + #location + ': \"' + location[n]  + '\"');
		write_line( flog, '----------------------------------------------------------\n');	
		progressbar( pb, { 'message' = 'Getting data availability for \"' + location[n] + '\".' , 'value' = 1+n } );
		dataset[n] = nsrdb( location[n] );
		write_line( flog, dataset[n].msg + '\n' );
		if ( !dataset[n].ok )
		{
			download_ok = false;
			write_line( flog, dataset[n].msg + '\n');
			continue;
		}	

		x = value('in_nsrdb_options');
		if ( x == TMY ) // type is a string
			type = 'tmy';
		elseif ( x == SINGLE_YEAR ) // type is a number
		{
			y = choose_from_list( dataset[n].years, 'Choose a year', 'Available Years for \"' + location[n] +'\"', 0 ); 
			if (y == '')
			{
				download_ok = false;
				write_line( flog, 'Year not valid: Selection cancelled by user.\n' );
				continue;
			}
			else	
				type = to_int( y );
		}
		else // x == ALL_YEARS, type is an array of numbers
			type = dataset[n].years;
		write_line( flog, 'Requested year(s): ' + type );

		// verify that type parameter is a valid value and convert to array if needed
		d = typeof( type );
		bad = [];
		if ( d == 'string' && type == 'tmy' ) // download tmy only
			type = ['tmy'];
		elseif ( d == 'string' ) // invalid parameter
			bad[0] = type;
		elseif ( d == 'number' ) // single year
		{
			type = [type];
			if( ( dataset[n].years ?@ type[0] ) == -1 )
				bad[0] = type[0];
		}	
		elseif ( n == 0 ) // multiple years, keep good years and remove bad years, only need to do once
		{	
			j=0;
			for ( i=0; i<#type; i++ )
			{
				if ( ( dataset[n].years ?@ type[i] ) == -1 ) 
				{
					bad[j] = type[i];
					j++;
				}	
			}
			for ( i=0; i<#bad; i++ )
				for ( j=0; j<#type; j++ )
					if ( type[j] == bad[i] )
						type -@ j;
		}

		if ( bad == [] )
			bad = 'None';
		else 
			download_ok = false;
		write_line( flog, 'Invalid requested years: ' + bad);

		if ( dataset[n].ok )
		{ 
			// portion of url that is the same for all download scenarios
			base_url = dataset[n].url;
			base_url += '?api_key=<SAMAPIKEY>';
			base_url += '&full_name=sam_user';
			base_url += '&email=<USEREMAIL>';
			base_url += '&affiliation=unknown'; 
			base_url += '&mailing_list=false';
			base_url += '&reason=SAM';
			base_url += '&interval=' + time_step;
			base_url += '&utc=false';
			base_url += '&leap_day=false';

			if ( #type > 1 && n==0)
			{
				progressbar( pb );
				pb = progressbar( { 'title' = 'Download Progress' , 'message' = 'Starting download.' , 'cancelbutton' = false , 'time' = false , 'max' = #location*#type } );
			}
			
			// for each year	
			for( i=0; i<#type; i++ )
			{

				if ( type[i] == 'tmy' ) // relative_humidity not available for psmv3 tmy data
					base_url += '&attributes=dni,dhi,dew_point,air_temperature,surface_pressure,wind_direction,wind_speed,surface_albedo'; //SEE NSRDB.CPP 
				else
					base_url += '&attributes=dni,dhi,dew_point,air_temperature,surface_pressure,relative_humidity,wind_direction,wind_speed,surface_albedo'; //SEE NSRDB.CPP 

				write_line( flog, '\nYear ' + to_string(i+1) + ' of ' + #type + ': ' + type[i]);
				write_line( flog, '----------------------------------------------------------\n');	
				url = base_url + '&names=' + to_string(type[i]);
				url += '&wkt=POINT(' + dataset[n].lon + '%20' + dataset[n].lat + ')';
				//str_url = replace( url, mid( url, strpos( url, 'api_key=' ) + strlen( 'api_key=' ), 40 ), '<API_KEY>' );
				write_line( flog, url + '\n');
				// create folder for multiple years to facilitate p50 p90
				// do not put tmy file in multiple year folder
				// use default folder if mdkir() fails
				path = folder + '/';
				if ( #type > 1 && strpos( lower(type[i]), 'tmy' ) == -1 )
				{
					path = folder + '/' + clean_name( location[n] + '/');
					if ( !dir_exists( path ) )
						if ( !mkdir( path, true ) )
							path = folder + '/';
				}
				fname = path + clean_name( location[n] ) + '_' + dataset[n].lat + '_' + dataset[n].lon + '_psmv3_' + time_step + '_' + type[i] + '.csv';
				if ( file_exists( fname ) )
					write_line( flog, 'File skipped, already exists: ' + fname + '\n');
				else	
				{
					start = start_timer();
					progressbar( pb, { 'message' = 'Downloading ' + type[i] + ' file for \"' + location[n] + '\". File ' + to_string(i+n+1) + ' of ' + to_string(#location+#type) + '.' , 'value' = 1+i+n } );
					wf = curl( url , { 'file'= fname } ); // curl() should replace <SAMAPI> and <USEREMAIL > with values from private.h
					time = elapsed_time() / 1000;
					write_line( flog, 'Download time: ' + time + ' seconds.\n' );
					wf_error = wf_check( fname );
					if ( wf_error != 0 ) // usually indicates NSRDB returned a file containing error message instead of weather data
					{
						download_ok = false;
						nsrdb_message = read_text_file( fname );
						write_line( flog, 'Weather file test failed, ' + wf_error + ': ' + fname + '.\n');
						write_line( flog, 'Message from NSRDB: ' + left( replace( nsrdb_message, '\n', ';'), 300 ) + '\n');
						fname_new = replace( fname, '.csv' , '_bad.txt' ); // rename file so next download attempt won't detect existing file
						ok = rename_file( fname , fname_new );
						if ( ok ) 
							write_line( flog, '* File renamed to: ' + fname_new + '.\n' );
						else
							write_line( flog, '* Failed to rename ' + fname + '.\n' );	
					}
					else
					{
						// sets library to last file that was downloaded and passed weather file test
						rescanlibrary('solar');
						libkey = file_only( fname );
						libkey = mid(libkey,0,#libkey-4);		
						value( 'solar_resource', libkey );
						write_line( flog, 'Weather file test passed: ' + fname + '.\n');
					}	
				}
			}
		}	
		else
		{
			download_ok = false;
			write_line( flog, dataset[n].msg + '\n');
		}
		progressbar( pb, { 'message' = 'Done.' , 'value' = #location*#type } );
	}

	progressbar( pb );
	close ( flog );
	if ( download_ok )
		msg = 'Download finished.';
	else
		msg = 'Download finished with errors.';
		
	/*show_log = yesno( msg + '\nOpen log file?' );
	if ( show_log )
		browse( log_file );*/
	browse( path_only( log_file ) );
};
